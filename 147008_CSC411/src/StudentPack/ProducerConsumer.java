/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package StudentPack;

import static StudentPack.Producer.PrintMarks;
import static StudentPack.Producer.xmlFilePath;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 *
 * @author Admissions
 */
public class ProducerConsumer extends javax.swing.JFrame {

    ArrayList<ITStudent> studentlist = new ArrayList<ITStudent>();
    int numfiles = 0;

    /**
     * Creates new form ProducerConsumer
     */
    public ProducerConsumer() {
        initComponents();
        numfiles = ShowFiles();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("CONSUMER");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("PRODUCER");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 803, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("CONSUMER", jPanel2);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 803, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("PRODUCER", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(301, 301, 301)
                        .addComponent(jButton2)
                        .addGap(285, 285, 285)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Thread t1 = new ProducerThread();
        if (numfiles == 0) {
            t1.start();
        } else {
            JOptionPane.showMessageDialog(null, "Directory not empty");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        Thread t1 = new ExtractInfoTread();
        Thread t2 = new SortThread();
        Thread t3 = new CreateReportTread();
        t1.start();
        try {
            t1.join();
        } catch (InterruptedException ex) {
            Logger.getLogger(ProducerConsumer.class.getName()).log(Level.SEVERE, null, ex);
        }
        t2.start();
        try {
            t2.join();
        } catch (InterruptedException ex) {
            Logger.getLogger(ProducerConsumer.class.getName()).log(Level.SEVERE, null, ex);
        }
        t3.start();
        try {
            t3.join();// TODO add your handling code here:
        } catch (InterruptedException ex) {
            Logger.getLogger(ProducerConsumer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProducerConsumer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProducerConsumer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProducerConsumer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProducerConsumer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProducerConsumer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
 static class ITStudent {

        String StudentName;
        int StudentId;
        String Programme;
        String CourCode;
        double Mark;

        public ITStudent(String StudentName, int studentId, String Programme, String CourCode,
                double Mark) {
            this.StudentName = StudentName;
            this.StudentId = studentId;
            this.Programme = Programme;
            this.CourCode = CourCode;
            this.Mark = Mark;
        }

        String getStudentName() {
            return this.StudentName;
        }

        int getStudentId() {
            return this.StudentId;
        }

        String getProgramme() {
            return this.Programme;
        }

        String getCourCode() {
            return this.CourCode;
        }

        double getMark() {
            return this.Mark;
        }

        @Override
        public String toString() {
            return StudentName;
        }
        public static Comparator<ITStudent> StudentNumberComparator = new Comparator<ITStudent>() {

            public int compare(ITStudent s1, ITStudent s2) {

                int rollno1 = s1.StudentId;
                int rollno2 = s2.StudentId;

                /*For ascending order*/
                return rollno1 - rollno2;
            }
        };
    }

    class ExtractInfoTread extends Thread {

        @Override
        public void run() {
            File file = null;
            File folder = new File("src//myxml//");
            File[] listOfFiles = folder.listFiles();

            try {
                for (int i = 0; i < listOfFiles.length; i++) {
                    String Filename = listOfFiles[i].getName();
                    int s = Filename.length();
                    if (listOfFiles[i].isFile() && Filename.substring(s - 4, s).matches(".xml")) {

//creating a constructor of file class and parsing an XML file  
                        file = new File("src//myxml//" + listOfFiles[i].getName());
//an instance of factory that gives a document builder  
                        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
//an instance of builder to parse the specified xml file  
                        DocumentBuilder db = dbf.newDocumentBuilder();
                        Document doc = db.parse(file);
                        doc.getDocumentElement().normalize();
//System.out.println("Root element: " + doc.getDocumentElement().getNodeName());  
                        NodeList nodeList = doc.getElementsByTagName("ITStudent");
// nodeList is not iterable, so we are using for loop  
                        for (int itr = 0; itr < nodeList.getLength(); itr++) {
                            Node node = nodeList.item(itr);
//System.out.println("\nNode Name :" + node.getNodeName());  
                            if (node.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) node;
                                int stuId = Integer.parseInt(eElement.getElementsByTagName("StudentId").item(0).getTextContent());
                                String StudentName = eElement.getElementsByTagName("StudentName").item(0).getTextContent();
                                String Programme = eElement.getElementsByTagName("StudentProgramme").item(0).getTextContent();
                                String CourCode = eElement.getElementsByTagName("StudentCourCode").item(0).getTextContent();
                                int mark = Integer.parseInt(eElement.getElementsByTagName("StudentMark").item(0).getTextContent());

//System.out.println("Student id: "+ stuId);  
//System.out.println("Student Name: "+ StudentName); 
//System.out.println("Programme: "+ Programme);  
//System.out.println("Subject: "+ CourCode);  
//System.out.println("Marks: "+ mark);  
                                ITStudent student;
                                student = new ITStudent(StudentName, stuId, Programme, CourCode, mark);
                                studentlist.add(student);

//System.err.println(studentlist.toString()); 
                            }
                        }
                    }
                    file.delete();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }

    class SortThread extends Thread {

        @Override
        public void run() {
            Collections.sort(studentlist, ITStudent.StudentNumberComparator);
        }
    }

    class CreateReportTread extends Thread {

        @Override
        public void run() {
            int stunum = 0;
            String comment;
            jPanel2.grabFocus();
            for (ITStudent str : studentlist) {
                if (stunum != str.StudentId) {
                    jTextArea2.setText(jTextArea2.getText() + "___________________________________________________________________________\n");
                    jTextArea2.setText(jTextArea2.getText() + "Student id: " + str.StudentId + "\t\t Student Name: " + str.StudentName + "\n");
                    jTextArea2.setText(jTextArea2.getText() + "___________________________________________________________________________\n");
                    jTextArea2.setText(jTextArea2.getText() + "Programme: " + str.Programme + "\n");
                    jTextArea2.setText(jTextArea2.getText() + "___________________________________________________________________________\n");
                    jTextArea2.setText(jTextArea2.getText() + "Courcode\tMark\t\t\tComments \n");
                    jTextArea2.setText(jTextArea2.getText() + "___________________________________________________________________________\n");
                }
                if (str.Mark < 50) {
                    comment = "Failed";
                } else {
                    comment = "Passed";
                }

                jTextArea2.setText(jTextArea2.getText() + str.CourCode + "\t\t" + str.Mark + "\t\t\t" + comment + "\n");
                jTextArea2.setText(jTextArea2.getText() + "----------------------------------------------------------------------------\n");
                stunum = str.StudentId;
            }
        }
    }

    public static String[][] PrintMarks(int StudentId, String Names, String Programme) {
        String[][] myArrayString = new String[10][5];
        myArrayString[0][0] = StudentId + "";
        myArrayString[0][1] = Names + "";
        myArrayString[0][2] = Programme + "";
        myArrayString[0][3] = "CSC111";
        myArrayString[0][4] = (int) (Math.random() * 100) + "";
        myArrayString[1][0] = StudentId + "";
        myArrayString[1][1] = Names + "";
        myArrayString[1][2] = Programme + "";
        myArrayString[1][3] = "ACS111";
        myArrayString[1][4] = (int) (Math.random() * 100) + "";
        myArrayString[2][0] = StudentId + "";
        myArrayString[2][1] = Names + "";
        myArrayString[2][2] = Programme + "";
        myArrayString[2][3] = "GNS113";
        myArrayString[2][4] = (int) (Math.random() * 100) + "";
        myArrayString[3][0] = StudentId + "";
        myArrayString[3][1] = Names + "";
        myArrayString[3][2] = Programme + "";
        myArrayString[3][3] = "ACF111";
        myArrayString[3][4] = (int) (Math.random() * 100) + "";
        myArrayString[4][0] = StudentId + "";
        myArrayString[4][1] = Names + "";
        myArrayString[4][2] = Programme + "";
        myArrayString[4][3] = "ACF112";
        myArrayString[4][4] = (int) (Math.random() * 100) + "";
        myArrayString[5][0] = StudentId + "";
        myArrayString[5][1] = Names + "";
        myArrayString[5][2] = Programme + "";
        myArrayString[5][3] = "CSC113";
        myArrayString[5][4] = (int) (Math.random() * 100) + "";
        myArrayString[6][0] = StudentId + "";
        myArrayString[6][1] = Names + "";
        myArrayString[6][2] = Programme + "";
        myArrayString[6][3] = "MAT112";
        myArrayString[6][4] = (int) (Math.random() * 100) + "";
        myArrayString[7][0] = StudentId + "";
        myArrayString[7][1] = Names + "";
        myArrayString[7][2] = Programme + "";
        myArrayString[7][3] = "CSC112";
        myArrayString[7][4] = (int) (Math.random() * 100) + "";
        myArrayString[8][0] = StudentId + "";
        myArrayString[8][1] = Names + "";
        myArrayString[8][2] = Programme + "";
        myArrayString[8][3] = "BUS122";
        myArrayString[8][4] = (int) (Math.random() * 100) + "";
        myArrayString[9][0] = StudentId + "";
        myArrayString[9][1] = Names + "";
        myArrayString[9][2] = Programme + "";
        myArrayString[9][3] = "BUS134";
        myArrayString[9][4] = (int) (Math.random() * 100) + "";
        return myArrayString;
    }

    class ProducerThread extends Thread {

        @Override
        public void run() {
            String[] name = {"MICHAEL", "JAMES", "JOHN", "ROBERT", "DAVID", "WILLIAM",
                "MARY", "CHRISTOPHER", "JOSEPH", "RICHARD", "DANIEL", "THOMAS",
                "MATTHEW", "JENNIFER", "CHARLES", "ANTHONY", "PATRICIA", "LINDA", "MARK", "ELIZABETH",
                "JOSHUA", "STEVEN", "ANDREW",
                "KEVIN",
                "BRIAN",
                "BARBARA",
                "JESSICA",
                "JASON",
                "SUSAN",
                "TIMOTHY",
                "PAUL",
                "KENNETH",
                "LISA",
                "RYAN",
                "SARAH",
                "KAREN",
                "JEFFREY",
                "DONALD",
                "ASHLEY",
                "ERIC",
                "JACOB",
                "NICHOLAS",
                "JONATHAN",
                "RONALD",
                "MICHELLE",
                "KIMBERLY",
                "NANCY",
                "JUSTIN",
                "SANDRA",
                "AMANDA",
                "BRANDON",
                "STEPHANIE",
                "EMILY",
                "MELISSA",
                "GARY",
                "EDWARD",
                "STEPHEN",
                "SCOTT",
                "GEORGE",
                "DONNA",
                "JOSE",
                "REBECCA",
                "DEBORAH",
                "LAURA",
                "CYNTHIA",
                "CAROL",
                "AMY",
                "MARGARET",
                "GREGORY",
                "SHARON",
                "LARRY",
                "ANGELA",
                "MARIA",
                "ALEXANDER",
                "BENJAMIN",
                "NICOLE",
                "KATHLEEN",
                "PATRICK",
                "SAMANTHA",
                "TYLER",
                "SAMUEL",
                "BETTY",
                "BRENDA",
                "PAMELA",
                "AARON",
                "KELLY",
                "HEATHER",
                "RACHEL",
                "ADAM",
                "CHRISTINE",
                "ZACHARY",
                "DEBRA",
                "KATHERINE",
                "DENNIS",
                "NATHAN",
                "CHRISTINA",
                "JULIE",
                "JORDAN",
                "KYLE",
                "ANNA"};
            String[] Surname = {"SMITH",
                "JOHNSON",
                "WILLIAMS",
                "BROWN",
                "JONES",
                "GARCIA",
                "RODRIGUEZ",
                "MILLER",
                "MARTINEZ",
                "DAVIS",
                "HERNANDEZ",
                "LOPEZ",
                "GONZALEZ",
                "WILSON",
                "ANDERSON",
                "THOMAS",
                "TAYLOR",
                "LEE",
                "MOORE",
                "JACKSON",
                "PEREZ",
                "MARTIN",
                "THOMPSON",
                "WHITE",
                "SANCHEZ",
                "HARRIS",
                "RAMIREZ",
                "CLARK",
                "LEWIS",
                "ROBINSON",
                "WALKER",
                "YOUNG",
                "HALL",
                "ALLEN",
                "TORRES",
                "NGUYEN",
                "WRIGHT",
                "FLORES",
                "KING",
                "SCOTT",
                "RIVERA",
                "GREEN",
                "HILL",
                "ADAMS",
                "BAKER",
                "NELSON",
                "MITCHELL",
                "CAMPBELL",
                "GOMEZ",
                "CARTER",
                "ROBERTS",
                "DIAZ",
                "PHILLIPS",
                "EVANS",
                "TURNER",
                "REYES",
                "CRUZ",
                "PARKER",
                "EDWARDS",
                "COLLINS",
                "STEWART",
                "MORRIS",
                "MORALES",
                "ORTIZ",
                "GUTIERREZ",
                "MURPHY",
                "ROGERS",
                "COOK",
                "KIM",
                "MORGAN",
                "COOPER",
                "RAMOS",
                "PETERSON",
                "GONZALES",
                "BELL",
                "REED",
                "BAILEY",
                "CHAVEZ",
                "KELLY",
                "HOWARD",
                "RICHARDSON",
                "WARD",
                "COX",
                "RUIZ",
                "BROOKS",
                "WATSON",
                "WOOD",
                "JAMES",
                "MENDOZA",
                "GRAY",
                "BENNETT",
                "ALVAREZ",
                "CASTILLO",
                "PRICE",
                "HUGHES",
                "VASQUEZ",
                "SANDERS",
                "JIMENEZ",
                "LONG",
                "FOSTER"};

            for (int i = 1; i <= 10; i++) {
                try {

                    DocumentBuilderFactory documentFactory = DocumentBuilderFactory.newInstance();

                    DocumentBuilder documentBuilder = documentFactory.newDocumentBuilder();

                    Document document = documentBuilder.newDocument();

                    // root element
                    Element root = document.createElement("class");
                    document.appendChild(root);
                    String[][] ss = PrintMarks((int) (Math.random() * 100000000), name[(int) (Math.random() * 100)] + " "
                            + Surname[(int) (Math.random() * 100)], "Bsc IT");
                    // employee element
                    for (int v = 0; v < 10; v++) {
                        Element student = document.createElement("ITStudent");

                        root.appendChild(student);

                        // set an attribute to staff element
                        // Attr attr = document.createAttribute("StudentId");
                        //attr.setValue("10");
                        //student.setAttributeNode(attr);
                        //you can also use staff.setAttribute("id", "1") for this
                        Element StudentId = document.createElement("StudentId");
                        StudentId.appendChild(document.createTextNode(ss[v][0]));
                        student.appendChild(StudentId);

                        // firstname element
                        Element firstName = document.createElement("StudentName");
                        firstName.appendChild(document.createTextNode(ss[v][1]));
                        student.appendChild(firstName);

                        // lastname element
                        Element programme = document.createElement("StudentProgramme");
                        programme.appendChild(document.createTextNode(ss[v][2]));
                        student.appendChild(programme);

                        // email element
                        Element CourCode = document.createElement("StudentCourCode");
                        CourCode.appendChild(document.createTextNode(ss[v][3]));
                        student.appendChild(CourCode);

                        // department elements
                        Element StudentMark = document.createElement("StudentMark");
                        StudentMark.appendChild(document.createTextNode(ss[v][4]));
                        student.appendChild(StudentMark);
                    }
                    // create the xml file
                    //transform the DOM Object to an XML File
                    TransformerFactory transformerFactory = TransformerFactory.newInstance();
                    Transformer transformer = transformerFactory.newTransformer();
                    DOMSource domSource = new DOMSource(document);
                    StreamResult streamResult = new StreamResult(new File(xmlFilePath + "Student" + i + ".xml"));

                    // If you use
                    // StreamResult result = new StreamResult(System.out);
                    // the output will be pushed to the standard output ...
                    // You can use that for debugging 
                    transformer.transform(domSource, streamResult);
                    ShowFiles();
                } catch (ParserConfigurationException pce) {
                    pce.printStackTrace();
                } catch (TransformerException tfe) {
                    tfe.printStackTrace();
                }
            }
        }
    }

    public int ShowFiles() {
        File file = null;
        File folder = new File("src//myxml//");
        File[] listOfFiles = folder.listFiles();
        if (listOfFiles.length == 0) {
            jTextArea1.setText("No file in Directory");
        } else {
            jTextArea1.setText("");
            for (int i = 0; i < listOfFiles.length; i++) {
                jTextArea1.setText(jTextArea1.getText() + listOfFiles[i].getName() + "\n");
            }
        }
        return listOfFiles.length;
    }
}
